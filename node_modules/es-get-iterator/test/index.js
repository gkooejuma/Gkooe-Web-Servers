'use strict';

var test = require('tape');
var Test = require('tape/lib/test');
var inspect = require('object-inspect');
// eslint-disable-next-line global-require
var hasSymbols = require('has-symbols')() || require('has-symbols/shams')();
var hasBigInts = require('has-bigints')();
var forEach = require('for-each');

var getIterator = process.env.TEST_VARIANT === 'node' ? require('../node') : require('../');

Test.prototype.iterate = function (value, expected, message) {
	var i = 0;
	this.test(message, function (t) {
		var iterator = getIterator(value);
		if (!iterator) {
			t.fail(inspect(value) + ' is not iterable');
			return t.end();
		}
		if (typeof iterator.next !== 'function') {
			t.fail('iterator does not have a next function, got ' + inspect(iterator));
			return t.end();
		}
		var result;
		while ((result = iterator.next()) && !result.done) {
			var expectedDebug = typeof expected[i] === 'string' ? expected[i].charCodeAt(0) : expected[i];
			var actualDebug = typeof result.value === 'string' ? result.value.charCodeAt(0) : result.value;
			t.deepEqual(result.value, expected[i], 'index ' + i + ': expected ' + inspect(expectedDebug) + ', got ' + inspect(actualDebug));
			i += 1;
		}
		t.equal(i, expected.length, 'expected ' + expected.length + ' values, got ' + i + ' values');

		t.end();
	});
};

Test.prototype.noIterate = function (value) {
	this.equal(getIterator(value), undefined, inspect(value) + ' is not iterable');
};

Test.prototype.fakeIterator = function (value) {
	this.test(inspect(value) + ' with a fake iterator', { skip: !hasSymbols }, function (t) {
		var fakeValues = ['fake', 'iterator', 'scary'];
		var o = Object(value);
		o[Symbol.iterator] = function () {
			return getIterator(fakeValues);
		};
		t.iterate(o, fakeValues, inspect(o) + ' with an overwritten iterator method, yields those values instead');
		t.end();
	});
};

var getArguments = function () { return arguments; };
var getSloppyArguments = Function('return arguments');

var collect = function createCollection(C, items) {
	var c = new C();
	forEach(items, function (item) {
		if (c.add) {
			c.add(item);
		} else {
			c.set(item[0], item[1]);
		}
	});
	return c;
};

var runTests = function runTests(t) {
	t.test('strings', function (st) {
		st.iterate('', [], '"" yields nothing');
		st.iterate(Object(''), [], inspect(Object('')) + ' yields nothing');
		st.iterate('foo', ['f', 'o', 'o'], '"foo" yields three chars');
		st.iterate(Object('foo'), ['f', 'o', 'o'], inspect(Object('foo')) + ' yields three chars');
		st.iterate('aðŸ’©z', [